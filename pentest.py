import tkinter as tk
from tkinter import messagebox, scrolledtext
from modules.reconnaissance import dns_lookup, subdomain_enum, geolocate_ip, ssl_certificate_check
from modules.scanning import nmap_scan, owasp_scan
from modules.exploitation import exploit_vulnerability
from modules.reporting import generate_report
import threading

class PentestToolApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Enhanced Automated Penetration Testing Tool")
        self.root.geometry("600x500")
        
        # Target Input
        self.target_label = tk.Label(root, text="Enter Target (IP/Domain):")
        self.target_label.pack(pady=10)
        
        self.target_entry = tk.Entry(root, width=50)
        self.target_entry.pack(pady=5)
        
        # Action Buttons
        self.start_button = tk.Button(root, text="Start Scan", command=self.start_scan, width=20)
        self.start_button.pack(pady=10)
        
        self.exploit_button = tk.Button(root, text="Exploit Vulnerabilities", command=self.start_exploit, width=20)
        self.exploit_button.pack(pady=5)
        
        self.report_button = tk.Button(root, text="Generate Report", command=self.generate_report_ui, width=20)
        self.report_button.pack(pady=5)
        
        # Results Display Area
        self.results_area = scrolledtext.ScrolledText(root, width=70, height=15)
        self.results_area.pack(pady=10)
        
    def start_scan(self):
        target = self.target_entry.get()
        if not target:
            messagebox.showwarning("Input Error", "Please enter a target IP or domain.")
            return
        
        self.results_area.delete(1.0, tk.END)
        self.results_area.insert(tk.END, "[+] Starting Reconnaissance...\n")
        
        # Start scanning in a separate thread to avoid blocking the UI
        scan_thread = threading.Thread(target=self.perform_scan, args=(target,))
        scan_thread.start()

    def perform_scan(self, target):
        # Reconnaissance
        self.results_area.insert(tk.END, "[INFO] Performing DNS Lookup...\n")
        dns_info = dns_lookup(target)
        self.results_area.insert(tk.END, f"{dns_info}\n")
        
        self.results_area.insert(tk.END, "[INFO] Performing Subdomain Enumeration...\n")
        subdomains = subdomain_enum(target)
        self.results_area.insert(tk.END, f"[INFO] Subdomains found: {', '.join(subdomains)}\n")
        
        self.results_area.insert(tk.END, "[INFO] Performing Geo Location Lookup...\n")
        geo_info = geolocate_ip(target)
        self.results_area.insert(tk.END, f"{geo_info}\n")
        
        self.results_area.insert(tk.END, "[INFO] Performing SSL Certificate Check...\n")
        ssl_info = ssl_certificate_check(target)
        self.results_area.insert(tk.END, f"{ssl_info}\n")
        
        # Scanning
        self.results_area.insert(tk.END, "\n[+] Starting Nmap Scan...\n")
        nmap_results = nmap_scan(target)
        for result in nmap_results:
            self.results_area.insert(tk.END, f"{result}\n")
        
        # OWASP Vulnerability Scan (Simulated)
        self.results_area.insert(tk.END, "[INFO] Performing OWASP Vulnerability Scan...\n")
        owasp_results = owasp_scan(target)
        for result in owasp_results:
            self.results_area.insert(tk.END, f"{result}\n")
        
        self.results_area.insert(tk.END, "\n[+] Scan Completed!\n")

    def start_exploit(self):
        target = self.target_entry.get()
        if not target:
            messagebox.showwarning("Input Error", "Please enter a target IP or domain.")
            return
        
        exploit_name = "exploit/multi/http/apache_mod_cgi_bash_env_exec"  # Example exploit
        self.results_area.insert(tk.END, "\n[+] Exploiting...\n")
        
        # Ensure to pass the correct exploit name and payload type
        exploit_results = exploit_vulnerability(target, exploit_name)
        self.results_area.insert(tk.END, f"{exploit_results}\n")
        
    def generate_report_ui(self):
        target = self.target_entry.get()
        if not target:
            messagebox.showwarning("Input Error", "Please enter a target IP or domain.")
            return
        
        self.results_area.insert(tk.END, "\n[+] Generating Report...\n")
        report_content = self.results_area.get(1.0, tk.END).strip().split("\n")
        report_status = generate_report(report_content)
        self.results_area.insert(tk.END, f"{report_status}\n")

if __name__ == "__main__":
    root = tk.Tk()
    app = PentestToolApp(root)
    root.mainloop()
